load("D:/csYr3/CS3002/Labs/Lab1/.RData")
myRealData=read.csv("D://csYr3/CS3002/Labs/Lab2/iris_real.csv")
myIrisData=read.csv("D://csYr3/CS3002/Labs/Lab2/iris.csv")
source("D://csYr3/CS3002/Labs/Lab2/WK_R.r")
myRealData<-na.omit(myRealData)
myRealData<-scale(myRealData)
myIrisData<-na.omit(myIrisData)
myIrisData<-scale(myIrisData)
fitReal <- kmeans(myRealData, 3)
kRealGroups <- fitReal$cluster
fit <- kmeans(myIrisData, 2)
kGroups <- fit$cluster
wk2 = WK_R(kGroups, kRealGroups) #wk = 0.57
fit <- kmeans(myIrisData, 3)
kGroups <- fit$cluster
wk3 = WK_R(kGroups, kRealGroups) #wk = 0.62
fit <- kmeans(myIrisData, 4)
kGroups <- fit$cluster
wk4 = WK_R(kGroups, kRealGroups) #wk = 0.56
fit <- kmeans(myIrisData, 5)
kGroups <- fit$cluster
wk5 = WK_R(kGroups, kRealGroups)
wk <- c(wk2,wk3,wk4,wk5)
plot(wk)
load("D:/csYr3/CS3003/Labs/Lab2/.RData")
sort(mydata$AVGCC, decreasing = TRUE)
head(mydata, n=5)
mySortedData <- sort(mydata$AVGCC, decreasing = TRUE)
head(mySortedData, n=5)
rm(mySortedData)
AVGCCdescendingData <- mydata[-AVGCC]
AVGCCdescendingData <- mydata[order(-AVGCC)]
AVGCCdescendingData <- mydata[order(-AVGCC),]
attach(mydata)
AVGCCdescendingData <- mydata[order(-AVGCC),]
help("attach")
top5Data <- AVGCCdescendingData[1:5,]
print(top5Data$Class)
print(top5Data)
AVGCCascendingData <- mydata[order(AVGCC),]
top5Data <- AVGCCdescendingData[1:5,]
print(top5Data)
print(top5Data$Class)
top5Data <- AVGCCascendingData[1:5,]
print(top5Data$Class)
plot(mydata$AVGCC, mydata$MAXCC)
MAXCCdescendingData <- mydata[order(-MAXCC),]
top5Data <- MAXCCdescendingData[1:5,]
print(top5Data$)
print(top5Data)
print(top5Data$Class)
plot(mydata$WMC, mydata$AVGCC)
plot(mydata$AVGCC, mydata$WMC)
cor(mydata$AVGCC, mydata$WMC, method = "spearman")
cor(mydata$AVGCC, mydata$WMC)
load("D:/csYr3/CS3002/Labs/Lab3/.RData")
load("D:/csYr3/CS3002/Labs/Lab3/.RData")
plot(pfit, uniform=TRUE, main="Pruned Decision Tree for irisDataSet")
text(pfit, use.n=TRUE, all=TRUE, cex=.8)
plot(fit, uniform=TRUE, main="Decision Tree for irisDataset")
text(fit, use.n=TRUE, all=TRUE, cex=.8)
load("D:/csYr3/CS3002/Labs/Lab3/.RData")
irisData = read.csv("D://csYr3/CS3002/Labs/Lab2/iris.csv", sep = ",")
iris_random = irisData[sample(150,150),]
colnames(irisData) <- c("1", "2", "3", "4")
irisData = read.csv("D://csYr3/CS3002/Labs/Lab2/iris.csv", sep = ",")
irisData = read.csv("D://csYr3/CS3002/Labs/Lab2/iris.csv", sep = ",")
colomnNames <- c(1,2,3,4)
rbind(colomnNames, irisData)
irisData = read.csv("D://csYr3/CS3002/Labs/Lab2/iris.csv", sep = ",")
row1 <- c(5.1,3.5,1.4,0.2)
colnames(irisData) <- c("sepal width", "sepal length", "petal width", "petal length")
rbind(row1, irisData)
irisData <- rbind(row1, irisData)
plot(irisData)
irisData <- na.omit(irisData)
irisData <- scale(irisData)
View(irisData)
plot(irisData)
irisData = read.csv("D://csYr3/CS3002/Labs/Lab2/iris.csv", sep = ",")
colnames(irisData) <- c("sepal width", "sepal length", "petal width", "petal length")
row1 <- c(5.1,3.5,1.4,0.2)
irisData <- rbind(row1, irisData)
rm(row1)
fit <- kmeans(irisData, 3)
Kgroups <- fit$cluster
plot(irisData, col=Kgroups)
irisData = read.csv("D://csYr3/CS3002/Labs/Lab2/iris.csv", sep = ",")
irisData <- na.omit(irisData)
irisData <- scale(irisData)
fit <- kmeans(irisData, 3)
Kgroups <- fit$cluster
plot(irisData, col=Kgroups)
irisData = read.csv("D://csYr3/CS3002/Labs/Lab2/iris.csv", sep = ",")
colnames(irisData) <- c("sepal width", "sepal length", "petal width", "petal length")
row1 <- c(5.1,3.5,1.4,0.2)
irisData <- rbind(row1, irisData)
rm(row1)
fit <- kmeans(irisData, 3)
Kgroups <- fit$cluster
plot(irisData, col=Kgroups)
irisClass <- Kgroups
irisData <- cbind(irisClass, irisData)
rm(Kgroups)
rm(irisClass)
iris_rand = myIrisData[sample(150,150),]
iris_rand = irisData[sample(150,150),]
irisData <- irisData[sample(150,150),]
rm(iris_rand)
irisClass = iris_rand[,1]
irisClass = irisData[,1]
irisValues = irisData[,-1]
irisClassTrain = irisClass[1:100]
irisValuesTrain = irisValues[1:100,]
irisClassTest = irisClass[100:150]
irisValuesTest = irisValues[100:150,]
library(rpart)
fit <- rpart(irisClassTrain~., method="class", data=irisValuesTrain)
plot(fit, uniform=TRUE, main="Decision Tree for irisDataset")
text(fit, use.n=TRUE, all=TRUE, cex=.8)
#testing the classifier on the test set by calculating the predictions for each test case in the test set
treepred <-predict(fit, irisValuesTest, type = 'class')
n = length(irisClassTest)
ncorrect = sum(treepred==irisClassTest)
accuracy=ncorrect/n
print(accuracy)
pfit<- prune(fit, cp=0.1)
View(pfit)
plot(pfit, uniform=TRUE, main="Pruned Decision Tree for irisDataSet")
text(pfit, use.n=TRUE, all=TRUE, cex=.8)
treepred <-predict(pfit, irisValuesTest, type = 'class')
n = length(irisClassTest) # the number of test cases
ncorrect = sum(treepred==irisClassTest) #the number of correctly predicted
accuracy=ncorrect/n
print(accuracy
)
pfit<- prune(fit, cp=0.5)
plot(pfit, uniform=TRUE, main="Pruned Decision Tree for irisDataSet")
text(pfit, use.n=TRUE, all=TRUE, cex=.8)
#(Prune) testing the classifier on the test set by calculating the predictions for each test case in the test set
treepred <-predict(pfit, irisValuesTest, type = 'class')
pfit<- prune(fit, cp=0.2)
plot(pfit, uniform=TRUE, main="Pruned Decision Tree for irisDataSet")
text(pfit, use.n=TRUE, all=TRUE, cex=.8)
#(Prune) testing the classifier on the test set by calculating the predictions for each test case in the test set
treepred <-predict(pfit, irisValuesTest, type = 'class')
n = length(irisClassTest) # the number of test cases
ncorrect = sum(treepred==irisClassTest) #the number of correctly predicted
accuracy=ncorrect/n
print(accuracy)
pfit<- prune(fit, cp=0.5)
plot(pfit, uniform=TRUE, main="Pruned Decision Tree for irisDataSet")
text(pfit, use.n=TRUE, all=TRUE, cex=.8)
#(Prune) testing the classifier on the test set by calculating the predictions for each test case in the test set
treepred <-predict(pfit, irisValuesTest, type = 'class')
n = length(irisClassTest) # the number of test cases
ncorrect = sum(treepred==irisClassTest) #the number of correctly predicted
accuracy=ncorrect/n
print(accuracy)
table_mat <- table(irisClassTest, treepred)
knn3pred = knn(irisvaluesTrain, irisvaluesTest, irisclassTrain, k=3)
library(class)
knn3pred = knn(irisvaluesTrain, irisvaluesTest, irisclassTrain, k=3)
knn3pred = knn(irisValuesTrain, irisValuesTest, irisClassTrain, k=3)
n = length(irisClassTest)
ncorrect = sum(knn3pred==irisClassTest)
accuracy = ncorrect/n
print(accuracy)
plot(irisValuesTrain$`sepal width`,irisValuesTrain$`sepal length`)
treepred <-predict(fit, irisValuesTest, type = 'class')
plot(irisValuesTrain$`sepal width`,irisValuesTrain$`sepal length`, col=treepred)
print(accuracy)
pfit0_1<- prune(fit, cp=0.1)
pfit0_3<- prune(fit, cp=0.3)
pfit0_5<- prune(fit, cp=0.5)
treepred1 <-predict(pfit0_1, irisValuesTest, type = 'class')
ncorrect = sum(treepred1==irisClassTest)
accuracytp1 = ncorrect/n
treepred3 <-predict(pfit0_3, irisValuesTest, type = 'class')
ncorrect = sum(treepred3==irisClassTest)
accuracytp3 = ncorrect/n
treepred5 <-predict(pfit0_5, irisValuesTest, type = 'class')
ncorrect = sum(treepred5==irisClassTest)
accuracytp5 = ncorrect/n
knn1pred = knn(irisValuesTrain, irisValuesTest, irisClassTrain, k=1)
ncorrect = sum(knn1pred==irisClassTest)
accuracykp1 = ncorrect/n
knn3pred = knn(irisValuesTrain, irisValuesTest, irisClassTrain, k=3)
ncorrect = sum(knn3pred==irisClassTest)
accuracykp3 = ncorrect/n
knn5pred = knn(irisValuesTrain, irisValuesTest, irisClassTrain, k=5)
ncorrect = sum(knn5pred==irisClassTest)
accuracykp5 = ncorrect/n
accuracyTable <- matrix(c(treepred1, knn1pred, treepred3, knn3pred, treepred5, knn5pred),ncol = 3, byrow = TRUE)
colnames(accuracyTable) <- c("Decision Tree", "KNN")
rownames(accuracyTable) <- c('1', '2', '3')
accuracyTable <- as.table(accuracyTable)
accuracyTable <- matrix(c(treepred1, knn1pred, treepred3, knn3pred, treepred5, knn5pred),ncol = 2, byrow = TRUE)
colnames(accuracyTable) <- c("Decision Tree", "KNN")
rownames(accuracyTable) <- c('1', '2', '3')
accuracyTable <- as.table(accuracyTable)
accuracyTable <- matrix(c(treepred1, knn1pred, treepred3, knn3pred, treepred5, knn5pred),ncol = 2, nrow = 3)
colnames(accuracyTable) <- c("Decision Tree", "KNN")
rownames(accuracyTable) <- c('1', '2', '3')
accuracyTable <- as.table(accuracyTable)
print(accuracyTable)
accuracyTable <- matrix(c(accuracytp1, accuracykp1, accuracytp3, accuracykp3, accuracytp5, accuracykp5),ncol = 2, nrow = 3)
colnames(accuracyTable) <- c("Decision Tree", "KNN")
rownames(accuracyTable) <- c('1', '2', '3')
accuracyTable <- as.table(accuracyTable)
accuracyTable <- matrix(c(accuracytp1, accuracykp1, accuracytp3, accuracykp3, accuracytp5, accuracykp5),ncol = 2, nrow = 3)
colnames(accuracyTable) <- c("Decision Tree", "KNN")
rownames(accuracyTable) <- c('1', '2', '3')
accuracyTable <- as.table(accuracyTable)
print(accuracyTable)
accuracyTable <- matrix(c(accuracytp1, accuracykp1, accuracytp3, accuracykp3, accuracytp5, accuracykp5),ncol = 2, nrow = 3)
colnames(accuracyTable) <- c("Decision Tree", "KNN")
rownames(accuracyTable) <- c('1', '3', '5')
accuracyTable <- as.table(accuracyTable)
print(accuracyTable)
print(accuracyTable)
print(accuracyTable)
print(table_mat)
install.packages("randomForest")
library(randomForest)
fit <- randomForest(wineclass~., data=winevalues)
winedata = read.csv("D://csYr3/CS3002/Labs/Lab3/winedata3.csv", sep = ",")
wineclass = winedata[,1]
winevalues = winedata[,-1]
#set up a training set
wineclassTrain = wineclass[1:100]
winevaluesTrain = winevalues[1:100,]
#and testset
wineclassTest = wineclass[100:178]
winevaluesTest = winevalues[100:178,]
fit <- randomForest(wineclass~., data=winevalues)
print(fit)
importance(fit)
install.packages("caret")
library(caret)
control <- rfeControl(functions=lmFuncs, method="cv", number=10)
results <- rfe(winevalues, wineclass, sizes=c(1:8), rfeControl=control)
print(results)
predictors(results)
plot(results, type = c("g","o"))
load("D:/csYr3/CS3003/Assessment/.RData")
boxplot(mydata$WMC, mydata$BUGS)
boxplot(mydata$WMC ~ mydata$BUGS, col=terrain.colors(4))
boxplot(mydata$BUGS ~ mydata$WMC, col=terrain.colors(4))
plot(mydata$BUGS, mydata$WMC)
plot(mydata$WMC, mydata$BUGS)
mydata.scale
scale(mydata)
scale(mydata$WMC)
plot(mydata$WMC, mydata$BUGS)
ScaledWMC <- scale(mydata$WMC)
plot(bugs, ScaledWMC)
plot(mydata$BUGS, ScaledWMC)
plot(ScaledWMC, mydata$BUGS)
scaledBugs <- scale(mydata$BUGS)
plot(ScaledWMC, scaledBugs)
plot(mydata$WMC, scaledBugs)
plot(mydata$WMC, scale(mydata$BUGS))
plot(scale(mydata$WMC), scale(mydata$BUGS))
rm(ScaledWMC)
rm(scaledBugs)
cor(mydata$WMC, mydata$BUGS, method = "pearson")
pearson <- cor(mydata$WMC, mydata$BUGS, method = "pearson")
pearsonWMC_BUGS <- cor(mydata$WMC, mydata$BUGS, method = "pearson")
rm(pearson)
pearsonCBO_BUGS <- cor(mydata$CBO, mydata$BUGS, method = "pearson")
pearsonLCOM_BUGS <- cor(mydata$LCOM, mydata$BUGS, method = "pearson")
pearsonAVGCC_BUGS <- cor(mydata$AVGCC, mydata$BUGS, method = "pearson")
pearsonCorrelation <- c(pearsonWMC_BUGS, pearsonCBO_BUGS, pearsonLCOM_BUGS, pearsonAVGCC_BUGS)
plot(pearsonCorrelation)
pearsonCorrelation <- colnames(WMC, CBO, LCOM, AVGCC)
colnames(pearsonCorrelation, c("WMC","CBO","LCOM","AVGCC"))
colnames(pearsonCorrelation) <- c("WMC","CBO","LCOM","AVGCC")
rownames(pearsonCorrelation) <- c("WMC","CBO","LCOM","AVGCC")
list.namesc("WMC","CBO","LCOM","AVGCC")
list.names(c("WMC","CBO","LCOM","AVGCC"))
names(pearsonCorrelation) <- c("WMC","CBO","LCOM","AVGCC")
plot(pearsonCorrelation)
pearsonCorrelation
plot(mydata$BUGS, mydata$WMC)
plot(mydata$AVGCC, mydata$WMC)
plot(mydata$WMC, mydata$AVGCC)
plot(mydata$WMC, mydata$MAXCC)
plot(mydata$WMC, mydata$AVGCC)
plot(mydata$BUGS, mydata$WMC)
plot(mydata$WMC, mydata$BUGS)
plot(mydata$AVGCC, mydata$BUGS)
plot(mydata$WMC, mydata$AVGCC)
plot(mydata$AVGCC, mydata$BUGS)
cor(mydata$AVGCC, mydata$BUGS)
cor(mydata$BUGS, mydata$BUGS)
row.names(pearsonCorrelation, "Variables")
sort(pearsonCorrelation, decreasing = true)
sort(pearsonCorrelation, decreasing = TRUE)
WMC <- mydata$WMC
Bugs <- mydata$BUGS
plot(Bugs, WMC)
plot(WMC, Bugs)
abline(lm(Bugs~WMC), col="red")
hist(Bugs)
plot(hist(WMC), add = TRUE, col="red")
plot(hist(Bugs), add = TRUE, col="blue")
plot(hist(WMC), add = TRUE, col="red")
plot(hist(WMC), add = TRUE, col="red")
plot(hist(Bugs), add = TRUE, col="blue")
plot(hist(Bugs), add = TRUE, col="blue")
plot(hist(WMC), add = TRUE, col="red")
library(dplyr)
filter(Bugs,Bugs > 2)
Bugs
filter_(Bugs,Bugs > 2)
filter(mydata, mydata$BUGS > 2)
filteredData<-filter(mydata, mydata$BUGS>2)
plot(filteredData$BUGS, filteredData$WMC)
abline(filteredData$BUGS, filteredData$WMC)
abline(lm(filteredData$BUGS~filteredData$WMC), col="red")
cor(filteredData$BUGS, filteredData$WMC)
rm(filteredData)
View(pearsonCorrelation)
rm(pearsonAVGCC_BUGS)
rm(pearsonCBO_BUGS)
rm(pearsonLCOM_BUGS)
rm(pearsonWMC_BUGS)
hist(Bugs)
hist(WMC, add=TRUE)
hist(Bugs)
hist(WMC)
hist(Bugs)
cumaliveBugs <- cumsum(Bugs)
rm(cumaliveBugs)
sort(Bugs, decreasing = FALSE)
Bugs <- sort(Bugs, decreasing = FALSE)
cumulativeBugs <- cumsum(Bugs)
WMC <- sort(WMC, decreasing = FALSE)
cumulativeWMC  <- cumsum(WMC)
hist(Bugs)
lines(cumulativeBugs, col="blue")
B <- ggplot2::(data=Bugs, aes(x=x))
B <- ggplot2::data=Bugs, aes(x=x)
Bugs.freq = table(cut(Bugs, seq(1.5, 5.5, by=0.5)), right = FALSE)
range(Bugs)
breaks = seq(0, 9, by = 1)
breaks
Bugs.cut = cut(Bugs, breaks, right = FALSE)
Bugs.freq = table(Bugs.cut)
cumfreqBugs = c(0, cumsum(Bugs.freq))
plot(breaks, cumfreqBugs)
hist(Bugs)
lines(breaks, cumfreqBugs)
hist(Bugs, ylim = c(0, 5000))
lines(breaks, cumfreqBugs)
plot(breaks, cumfreqBugs)
hist(Bugs, ylim = c(0, 5000))
plot(breaks, cumfreqBugs)
hist(Bugs, ylim = c(0, 5000))
lines(breaks, cumfreqBugs)
range(WMC)
breaks = seq(0, 138, by = 10)
breaks
breaks = seq(0, 1340, by = 10)
breaks = seq(0, 140, by = 10)
breaks
WMC.cut = cut(WMC, breaks, right = FALSE)
WMC.freq = table(WMC.cut)
cumfreqWMC= c(0, cumsum(WMC.freq))
hist(WMC)
hist(WMC, ylim = (0, 5000))
hist(WMC, ylim = c(0, 5000))
lines(breaks, cumfreqWMC)
CBO <- mydata$CBO
range(CBO)
breaks = seq(0, 180, by=10)
breaks
CBO.cut = cut(CBO, breaks, right=FALSE)
CBO.freq = table(CBO.cut)
cumfreqCBO = c(0, cumsum(CBO.freq))
hist(CBO)
lines(breaks, cumfreqCBO)
hist(CBO, ylim = c(0, 5000))
lines(breaks, cumfreqCBO)
plot(CBO,Bugs)
abline(lm(Bugs~CBO, data=mydata))
abline(lm(Bugs~CBO, data=mydata), col="blue")
cor(Bugs, CBO)
cor(Bugs, CBO, method = "pearson")
cor(Bugs, WMC)
cor(Bugs, WMC, method = "pearson")
cor(mydata$BUGS, mydata$WMC, method = "pearson")
load("D:/csYr3/CS3003/Labs/Lab5/Lab5.RData")
load("D:/csYr3/CS3072-3605/Implementation/Database/.RData")
sampleData2
fit<-kmeans(sampleData2, 2)
numericSampleData2<-sampleData2[,c(1,3)]
fit<-kmeans(numericSampleData2, 2)
kGroups<-fit$cluster
kGroups
plot(kGroups)
plot(fit)
View(sampleData2)
rm(kGroups)
rm(fit)
rm(sampleData2)
rm(numericSampleData2)
rm(sampleData)
setwd("D://csYr3/CS3072-3605/Implementation/Database/")
mockData<-read.csv("MOCK_DATA.csv")
mockData
fit<-kmeans(mockData,4)
clusterData(mockData[,c(3, 4)])
clusterData<-mockData[,c(3, 4)]
fit<-kmeans(clusterData,4)
kGroups<-fit$cluster
plot(kGroups)
plot(mockData$Fat.Burn,mockData$Muscle.Build)
mockData<-read.csv("MOCK_DATA.csv")
rm(fit)
rm(kGroups)
mockData<-read.csv("MOCK_DATA.csv")
